package llm

import (
	"context"
	"fmt"
	"os"

	"github.com/google/generative-ai-go/genai"
	"google.golang.org/api/option"
)

type ChatResponse struct {
	Content string `json:"content"`
}

type Client struct {
	model  *genai.GenerativeModel
	client *genai.Client
}

func NewClient(ctx context.Context, modelName string) (*Client, error) {
	apiKey := os.Getenv("GOOGLE_API_KEY")
	if apiKey == "" {
		return nil, fmt.Errorf("GOOGLE_API_KEY n√£o encontrada")
	}

	client, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))
	if err != nil {
		return nil, fmt.Errorf("erro ao criar cliente: %v", err)
	}

	model := client.GenerativeModel(modelName)

	return &Client{
		model:  model,
		client: client,
	}, nil
}

func (c *Client) GenerateText(ctx context.Context, prompt string) (string, error) {
	response, err := c.model.GenerateContent(ctx, genai.Text(prompt))
	if err != nil {
		return "", fmt.Errorf("erro ao gerar conte√∫do: %v", err)
	}

	if len(response.Candidates) == 0 {
		return "", fmt.Errorf("nenhuma resposta gerada")
	}

	candidate := response.Candidates[0]
	if len(candidate.Content.Parts) == 0 {
		return "", fmt.Errorf("resposta vazia")
	}

	if textPart, ok := candidate.Content.Parts[0].(genai.Text); ok {
		return string(textPart), nil
	}

	return "", fmt.Errorf("tipo de resposta n√£o suportado")
}

func (c *Client) CompleteChat(ctx context.Context, message string, tools []map[string]interface{}) (*ChatResponse, error) {
	systemPrompt := `üöó CONSULTOR DE VENDAS AUTOMOTIVAS INTELIGENTE

Voc√™ √© um consultor especializado em vendas de ve√≠culos com acesso a uma base de dados completa da concession√°ria.

REGRAS IMPORTANTES:
1. ‚úÖ SEMPRE use as ferramentas dispon√≠veis para consultar dados reais
2. ‚úÖ Para perguntas sobre carros baratos/caros, use get_vehicles_available com filtros de pre√ßo
3. ‚úÖ Para simula√ß√µes de financiamento, use calculate_financing
4. ‚úÖ Para melhores taxas, use get_best_financing
5. ‚ùå NUNCA invente dados - sempre consulte a base

FERRAMENTAS DISPON√çVEIS:
- get_vehicles_available: busca ve√≠culos (filtros: max_price, brand, type)
- get_best_financing: busca melhores op√ß√µes de financiamento
- calculate_financing: calcula parcelas espec√≠ficas

COMO RESPONDER A PERGUNTAS COMUNS:

üîç "carro barato" ‚Üí Use get_vehicles_available com max_price baixo
üîç "carro mais caro" ‚Üí Use get_vehicles_available sem filtro de pre√ßo e ordene por valor
üîç "simular parcelas de 60" ‚Üí Use calculate_financing com installments=60
üîç "melhor financiamento" ‚Üí Use get_best_financing

FORMATO DE RESPOSTA:
üí° Baseado em nossa base de dados:
[DADOS REAIS OBTIDOS DAS FERRAMENTAS]

‚ú® Sempre inclua:
- Pre√ßos dos ve√≠culos
- Especifica√ß√µes importantes (consumo, pot√™ncia, etc.)
- Detalhes do financiamento (valor da parcela, taxa, banco)
- Informa√ß√µes de IPVA e custos

‚ùì Seja proativo oferecendo simula√ß√µes e mais informa√ß√µes.

LEMBRE-SE: Use as ferramentas para obter dados reais e atualizados!`

	if len(tools) > 0 {
		systemPrompt += "\n\nFERRAMENTAS ATIVAS:"
		for _, tool := range tools {
			if name, ok := tool["name"].(string); ok {
				systemPrompt += "\n- " + name
			}
		}
	}

	fullPrompt := fmt.Sprintf("%s\n\nUsu√°rio: %s", systemPrompt, message)

	text, err := c.GenerateText(ctx, fullPrompt)
	if err != nil {
		return nil, err
	}

	return &ChatResponse{
		Content: text,
	}, nil
}

func (c *Client) Close() error {
	return c.client.Close()
}
